// Mocks generated by Mockito 5.4.5 from annotations
// in canvas_app/test/test_helpers/mock_providers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i9;

import 'package:canvas_app/Components/loading_enum.dart' as _i11;
import 'package:canvas_app/Models/Canvas/assignment.dart' as _i14;
import 'package:canvas_app/Models/Canvas/calendar_event.dart' as _i16;
import 'package:canvas_app/Models/Canvas/canvas_data.dart' as _i12;
import 'package:canvas_app/Models/Canvas/course.dart' as _i2;
import 'package:canvas_app/Models/Canvas/module.dart' as _i22;
import 'package:canvas_app/Models/Canvas/module_item.dart' as _i20;
import 'package:canvas_app/Models/chat/base_chat_sender.dart' as _i18;
import 'package:canvas_app/Models/chat/gemini_chat_sender.dart' as _i5;
import 'package:canvas_app/Models/flashcards/flashcard_deck.dart' as _i6;
import 'package:canvas_app/Models/settings_data.dart' as _i3;
import 'package:canvas_app/Providers/assingment_provider.dart' as _i13;
import 'package:canvas_app/Providers/calendar_provider.dart' as _i15;
import 'package:canvas_app/Providers/chat/chat_provider.dart' as _i17;
import 'package:canvas_app/Providers/course_provider.dart' as _i7;
import 'package:canvas_app/Providers/flashcard_provider.dart' as _i23;
import 'package:canvas_app/Providers/module_provider.dart' as _i21;
import 'package:canvas_app/Providers/theme_provider.dart' as _i10;
import 'package:flutter/material.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i19;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCourse_0 extends _i1.SmartFake implements _i2.Course {
  _FakeCourse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSettingsData_1 extends _i1.SmartFake implements _i3.SettingsData {
  _FakeSettingsData_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeThemeData_2 extends _i1.SmartFake implements _i4.ThemeData {
  _FakeThemeData_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDateTime_3 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGeminiChatSender_4 extends _i1.SmartFake
    implements _i5.GeminiChatSender {
  _FakeGeminiChatSender_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFlashcardDeck_5 extends _i1.SmartFake implements _i6.FlashcardDeck {
  _FakeFlashcardDeck_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CourseProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockCourseProvider extends _i1.Mock implements _i7.CourseProvider {
  MockCourseProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.Course> get courses => (super.noSuchMethod(
        Invocation.getter(#courses),
        returnValue: <_i2.Course>[],
      ) as List<_i2.Course>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i8.Future<void> getCourses() => (super.noSuchMethod(
        Invocation.method(
          #getCourses,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void addCourse(_i2.Course? course) => super.noSuchMethod(
        Invocation.method(
          #addCourse,
          [course],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeCourse(String? id) => super.noSuchMethod(
        Invocation.method(
          #removeCourse,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void filterCourses(bool Function(_i2.Course)? filter) => super.noSuchMethod(
        Invocation.method(
          #filterCourses,
          [filter],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Course getCourseById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getCourseById,
          [id],
        ),
        returnValue: _FakeCourse_0(
          this,
          Invocation.method(
            #getCourseById,
            [id],
          ),
        ),
      ) as _i2.Course);

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ThemeProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeProvider extends _i1.Mock implements _i10.ThemeProvider {
  MockThemeProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ThemeMode get themeMode => (super.noSuchMethod(
        Invocation.getter(#themeMode),
        returnValue: _i4.ThemeMode.system,
      ) as _i4.ThemeMode);

  @override
  set themeMode(_i4.ThemeMode? _themeMode) => super.noSuchMethod(
        Invocation.setter(
          #themeMode,
          _themeMode,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.LoadingWidget get loadingWidget => (super.noSuchMethod(
        Invocation.getter(#loadingWidget),
        returnValue: _i11.LoadingWidget.newtonCradle,
      ) as _i11.LoadingWidget);

  @override
  set loadingWidget(_i11.LoadingWidget? _loadingWidget) => super.noSuchMethod(
        Invocation.setter(
          #loadingWidget,
          _loadingWidget,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.SettingsData get settingsData => (super.noSuchMethod(
        Invocation.getter(#settingsData),
        returnValue: _FakeSettingsData_1(
          this,
          Invocation.getter(#settingsData),
        ),
      ) as _i3.SettingsData);

  @override
  set settingsData(_i3.SettingsData? _settingsData) => super.noSuchMethod(
        Invocation.setter(
          #settingsData,
          _settingsData,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.ThemeData get darkTheme => (super.noSuchMethod(
        Invocation.getter(#darkTheme),
        returnValue: _FakeThemeData_2(
          this,
          Invocation.getter(#darkTheme),
        ),
      ) as _i4.ThemeData);

  @override
  _i4.ThemeData get lightTheme => (super.noSuchMethod(
        Invocation.getter(#lightTheme),
        returnValue: _FakeThemeData_2(
          this,
          Invocation.getter(#lightTheme),
        ),
      ) as _i4.ThemeData);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void toggleTheme(bool? isDark) => super.noSuchMethod(
        Invocation.method(
          #toggleTheme,
          [isDark],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setLoadingWidget(_i11.LoadingWidget? widget) => super.noSuchMethod(
        Invocation.method(
          #setLoadingWidget,
          [widget],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> loadSettings() => (super.noSuchMethod(
        Invocation.method(
          #loadSettings,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i4.ThemeData getTheme() => (super.noSuchMethod(
        Invocation.method(
          #getTheme,
          [],
        ),
        returnValue: _FakeThemeData_2(
          this,
          Invocation.method(
            #getTheme,
            [],
          ),
        ),
      ) as _i4.ThemeData);

  @override
  void setCanvasData(_i12.CanvasData? canvasData) => super.noSuchMethod(
        Invocation.method(
          #setCanvasData,
          [canvasData],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setOpenAiApiKey(String? apiKey) => super.noSuchMethod(
        Invocation.method(
          #setOpenAiApiKey,
          [apiKey],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AssignmentProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAssignmentProvider extends _i1.Mock
    implements _i13.AssignmentProvider {
  MockAssignmentProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i14.Assignment> get assignments => (super.noSuchMethod(
        Invocation.getter(#assignments),
        returnValue: <_i14.Assignment>[],
      ) as List<_i14.Assignment>);

  @override
  set assignments(List<_i14.Assignment>? _assignments) => super.noSuchMethod(
        Invocation.setter(
          #assignments,
          _assignments,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void getAssignments(String? courseId) => super.noSuchMethod(
        Invocation.method(
          #getAssignments,
          [courseId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CalendarProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalendarProvider extends _i1.Mock implements _i15.CalendarProvider {
  MockCalendarProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i16.CalendarEvent> get events => (super.noSuchMethod(
        Invocation.getter(#events),
        returnValue: <_i16.CalendarEvent>[],
      ) as List<_i16.CalendarEvent>);

  @override
  set events(List<_i16.CalendarEvent>? _events) => super.noSuchMethod(
        Invocation.setter(
          #events,
          _events,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i14.Assignment> get assignments => (super.noSuchMethod(
        Invocation.getter(#assignments),
        returnValue: <_i14.Assignment>[],
      ) as List<_i14.Assignment>);

  @override
  set assignments(List<_i14.Assignment>? _assignments) => super.noSuchMethod(
        Invocation.setter(
          #assignments,
          _assignments,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get startDate => (super.noSuchMethod(
        Invocation.getter(#startDate),
        returnValue: _FakeDateTime_3(
          this,
          Invocation.getter(#startDate),
        ),
      ) as DateTime);

  @override
  set startDate(DateTime? _startDate) => super.noSuchMethod(
        Invocation.setter(
          #startDate,
          _startDate,
        ),
        returnValueForMissingStub: null,
      );

  @override
  DateTime get endDate => (super.noSuchMethod(
        Invocation.getter(#endDate),
        returnValue: _FakeDateTime_3(
          this,
          Invocation.getter(#endDate),
        ),
      ) as DateTime);

  @override
  set endDate(DateTime? _endDate) => super.noSuchMethod(
        Invocation.setter(
          #endDate,
          _endDate,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  set isLoading(bool? _isLoading) => super.noSuchMethod(
        Invocation.setter(
          #isLoading,
          _isLoading,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i8.Future<void> fetchEvents(_i4.BuildContext? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchEvents,
          [context],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  List<dynamic> getItemsForDay(DateTime? day) => (super.noSuchMethod(
        Invocation.method(
          #getItemsForDay,
          [day],
        ),
        returnValue: <dynamic>[],
      ) as List<dynamic>);

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ChatProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockChatProvider extends _i1.Mock implements _i17.ChatProvider {
  MockChatProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, _i18.BaseChatSender> get chatSenders => (super.noSuchMethod(
        Invocation.getter(#chatSenders),
        returnValue: <String, _i18.BaseChatSender>{},
      ) as Map<String, _i18.BaseChatSender>);

  @override
  set chatSenders(Map<String, _i18.BaseChatSender>? _chatSenders) =>
      super.noSuchMethod(
        Invocation.setter(
          #chatSenders,
          _chatSenders,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i17.ChatModel get currentModel => (super.noSuchMethod(
        Invocation.getter(#currentModel),
        returnValue: _i17.ChatModel.gemini,
      ) as _i17.ChatModel);

  @override
  _i5.GeminiChatSender get geminiSender => (super.noSuchMethod(
        Invocation.getter(#geminiSender),
        returnValue: _FakeGeminiChatSender_4(
          this,
          Invocation.getter(#geminiSender),
        ),
      ) as _i5.GeminiChatSender);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void setModel(_i17.ChatModel? model) => super.noSuchMethod(
        Invocation.method(
          #setModel,
          [model],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> loadMessages(String? id) => (super.noSuchMethod(
        Invocation.method(
          #loadMessages,
          [id],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<String> sendMessage(
    String? message,
    String? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [
            message,
            id,
          ],
        ),
        returnValue: _i8.Future<String>.value(_i19.dummyValue<String>(
          this,
          Invocation.method(
            #sendMessage,
            [
              message,
              id,
            ],
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<void> addMessage(
    String? message,
    String? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addMessage,
          [
            message,
            id,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> addFiles(
    List<_i20.ModuleItem>? selectedFiles,
    String? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addFiles,
          [
            selectedFiles,
            id,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void clearFiles(String? id) => super.noSuchMethod(
        Invocation.method(
          #clearFiles,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearFile(
    String? fileName,
    String? id,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #clearFile,
          [
            fileName,
            id,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<void> clearChat(String? id) => (super.noSuchMethod(
        Invocation.method(
          #clearChat,
          [id],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> clearAllChats() => (super.noSuchMethod(
        Invocation.method(
          #clearAllChats,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ModuleProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockModuleProvider extends _i1.Mock implements _i21.ModuleProvider {
  MockModuleProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i22.Module> get modules => (super.noSuchMethod(
        Invocation.getter(#modules),
        returnValue: <_i22.Module>[],
      ) as List<_i22.Module>);

  @override
  set modules(List<_i22.Module>? _modules) => super.noSuchMethod(
        Invocation.setter(
          #modules,
          _modules,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i8.Future<void> fetchModules(String? courseId) => (super.noSuchMethod(
        Invocation.method(
          #fetchModules,
          [courseId],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<String> getPageHtml(_i20.ModuleItem? item) => (super.noSuchMethod(
        Invocation.method(
          #getPageHtml,
          [item],
        ),
        returnValue: _i8.Future<String>.value(_i19.dummyValue<String>(
          this,
          Invocation.method(
            #getPageHtml,
            [item],
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<String> getModuleItemFileUrl(_i20.ModuleItem? item) =>
      (super.noSuchMethod(
        Invocation.method(
          #getModuleItemFileUrl,
          [item],
        ),
        returnValue: _i8.Future<String>.value(_i19.dummyValue<String>(
          this,
          Invocation.method(
            #getModuleItemFileUrl,
            [item],
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<List<_i20.ModuleItem>> getAllModuleItems(String? courseId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllModuleItems,
          [courseId],
        ),
        returnValue:
            _i8.Future<List<_i20.ModuleItem>>.value(<_i20.ModuleItem>[]),
      ) as _i8.Future<List<_i20.ModuleItem>>);

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FlashcardProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlashcardProvider extends _i1.Mock implements _i23.FlashcardProvider {
  MockFlashcardProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  List<_i6.FlashcardDeck> getDecksForCourse(String? courseId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDecksForCourse,
          [courseId],
        ),
        returnValue: <_i6.FlashcardDeck>[],
      ) as List<_i6.FlashcardDeck>);

  @override
  _i8.Future<_i6.FlashcardDeck> createDeck(
    String? courseId,
    String? title, {
    String? content,
    Map<String, String>? file,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createDeck,
          [
            courseId,
            title,
          ],
          {
            #content: content,
            #file: file,
          },
        ),
        returnValue: _i8.Future<_i6.FlashcardDeck>.value(_FakeFlashcardDeck_5(
          this,
          Invocation.method(
            #createDeck,
            [
              courseId,
              title,
            ],
            {
              #content: content,
              #file: file,
            },
          ),
        )),
      ) as _i8.Future<_i6.FlashcardDeck>);

  @override
  _i8.Future<void> deleteDeck(String? deckId) => (super.noSuchMethod(
        Invocation.method(
          #deleteDeck,
          [deckId],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> updateCardProgress(
    String? deckId,
    String? cardId,
    bool? wasCorrect,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCardProgress,
          [
            deckId,
            cardId,
            wasCorrect,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
